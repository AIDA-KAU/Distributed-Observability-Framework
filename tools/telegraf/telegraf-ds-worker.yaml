apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-worker
  namespace: measurement
  labels:
    k8s-app: telegraf
data:
  telegraf.conf: |+
    [agent]
      interval= "10s"
      round_interval= true
      metric_batch_size= 1000
      metric_buffer_limit= 10000
      collection_jitter= "0s"
      flush_interval= "1s"
      flush_jitter= "0s"
      precision= ""
      debug= false
      quiet= false
      logfile= ""
      hostname= "$HOSTNAME"
      omit_hostname= false
    
      #[[outputs.kafka]]
      #brokers = ["bitnami-kafka-headless.observability.svc.cluster.local:9092"]
      #topic = "overcloud"
      #data_format = "json"
      #[outputs.kafka.topic_suffix]
      #  method = "measurement"
      #  separator = "_"
    
    [[outputs.prometheus_client]]
          ## Address to listen on.
          listen = ":9126"
          collectors_exclude = ["gocollector", "process"]

    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false
      fieldpass = ["usage_user", "usage_system", "usage_idle", "usage_active", "usage_nice", "usage_iowait", "usage_irq", "usage_softirq", "usage_steal", "usage_guest", "usage_guest_nice"]
    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "loop*"]
      fieldpass = ["free", "used", "total", "used_percent"]
    [[inputs.diskio]]
      devices = ["sda", "sdb", "sdc", "vda"]
      fieldpass = ["read_time", "write_time", "reads", "writes", "io_time"]
    [[inputs.docker]]
      endpoint = "unix:///var/run/docker.sock"
      perdevice_include = ["cpu", "blkio", "network"]
      total_include = ["cpu", "blkio", "network"]
    [[inputs.mem]]
      fieldpass = ["available", "free", "total", "used_percent"]
    [[inputs.net]]
      interfaces= ["eth*", "ens*", "tap*"]
      ignore_protocol_stats= true
    [[inputs.system]]
      fieldpass = ["load1", "load5", "load15"]
    [[inputs.exec]]
      commands = ["bash /scripts/parse-vpp-metrics.sh"]
      data_format = "influx"
    [[inputs.kubernetes]]
      interval = "10s"
      url = "https://$HOSTIP:10250"
      bearer_token_string = "$TELEGRAF_TOKEN"
      insecure_skip_verify = true
      namepass = ["kubernetes_pod_container", "kubernetes_pod_volume", "kubernetes_pod_network"]


#    [[outputs.execd]]
#      namepass = ["kubernetes_pod_container"]
#      command = ["python3", "/data-analyzer.py"]

#    [[aggregators.minmax]]
#      period = "10s"        # send & clear the aggregate every 30s.
#      drop_original = false  # drop the original metrics.
#      namepass = ["kubernetes"]   # only "pass" swap metrics through the aggregator.


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vpp-metrics-parser
  namespace: measurement
data:
  parse-vpp-metrics.sh: |
    #!/bin/bash
    
    input_file="/vpp-metrics/vpp-metrics.txt"

    cat "$input_file" | awk 'BEGIN { FS = "[[:space:]]+" } /^memif0\/[0-9]+/  {
      interface=$1
      state=$3
      mtu=$4
      rx_packets=$7
    
      getline; rx_bytes=$4
      getline; tx_packets=$4
      getline; tx_bytes=$4
      getline; tx_error=$3

    printf "vpp,interface=%s,state=%s,mtu=%s rx_packets=%si,tx_packets=%si,rx_bytes=%si,tx_bytes=%si,tx_errors=%si\n", interface, state, mtu, rx_packets, tx_packets, rx_bytes, tx_bytes, tx_error
    }'

---
# Section: Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf-workers
  namespace: measurement
  labels:
    k8s-app: telegraf
spec:
  selector:
    matchLabels:
      name: telegraf
  template:
    metadata:
      labels:
        name: telegraf
    spec:
      hostNetwork: true
      serviceAccountName: telegraf
      containers:
        - name: telegraf
          image: telegraf:latest
          #args:
          #  - "--user telegraf:$(stat -c '%g' /var/run/docker.sock)"
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 25m
              memory: 50Mi
          securityContext:
            runAsUser: 995
            runAsGroup: 995
          env:
            - name: HOSTIP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: "HOST_PROC"
              value: "/rootfs/proc"
            - name: "HOST_SYS"
              value: "/rootfs/sys"
            - name: "TELEGRAF_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: telegraf-measurement-secret
                  key: token
          volumeMounts:
            - name: sys
              mountPath: /rootfs/sys
              readOnly: true
            - name: proc
              mountPath: /rootfs/proc
              readOnly: true
            - name: docker-socket
              mountPath: /var/run/docker.sock
            - name: utmp
              mountPath: /var/run/utmp
              readOnly: true
            - name: config
              mountPath: /etc/telegraf
            - name: vpp-metrics-parser-volume
              mountPath: /scripts
            - name: vpp-metrics-volume
              mountPath: /vpp-metrics/vpp-metrics.txt
            #- name: vpp-cli-dir
              #mountPath: /host-vppctl
      terminationGracePeriodSeconds: 10
      volumes:
        - name: sys
          hostPath:
            path: /sys
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: proc
          hostPath:
            path: /proc
        - name: utmp
          hostPath:
            path: /var/run/utmp
        - name: config
          configMap:
            name: telegraf-worker
        - name: vpp-metrics-parser-volume
          configMap:
            name: vpp-metrics-parser
        - name: vpp-metrics-volume
          hostPath:
            path: /opt/vpp-metrics.txt
            #- name: vpp-cli-dir
            #hostPath:
            #path: /usr/bin/